---
- name: (master only) create replication user exists on master
  mysql_user: >
    host="{{mysql_replication_slave}}"
    name="{{mysql_replication_user.name}}"
    password="{{mysql_replication_user.password}}"
    priv="{{mysql_replication_user.priv}}"
    state=present
  when: >
    mysql_replication_enabled
    and (mysql_replication_role == 'master')
  ignore_errors: True

- name: (slave only) check slave replication status
  mysql_replication: mode=getslave
  register: slave_status
  when: >
    mysql_replication_enabled
    and (mysql_replication_role == 'slave')
    and (mysql_replication_master != '')
  ignore_errors: True

- name: (slave only) stop slave
  mysql_replication: mode=stopslave
  when: slave_status | success

- name: (slave only) check master replication status
  mysql_replication: mode=getmaster
  delegate_to: "{{mysql_replication_master}}"
  register: master_status
  when: >
    mysql_replication_enabled
    and (mysql_replication_role == 'slave')
    and (mysql_replication_master != '')

- name: (slave only) configure replication on the slave
  mysql_replication:
    mode: changemaster
    master_host: "{{mysql_replication_master}}"
    master_user: "{{mysql_replication_user.name}}"
    master_password: "{{mysql_replication_user.password}}"
    master_log_file: "{{mysql_bin_log_file_path}}"
    master_log_pos: "{{mysql_bin_log_position}}"
  ignore_errors: True
  when: >
    mysql_replication_enabled
    and (mysql_replication_role == 'slave')
    and (mysql_replication_master != '')

- name: Start replication
  mysql_replication: mode=startslave
  when: >
    mysql_replication_enabled
    and (mysql_replication_role == 'slave')
    and (mysql_replication_master != '')
